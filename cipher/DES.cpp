#include "DES.h"
#include "utils.h"

const uint8_t DES::pc_first[] = {
    0xff, 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7};

const uint8_t DES::pc_last[] = {
    0xff, 40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25};

const uint8_t DES::des_P[] = {
    0xff, 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26,
    5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9,
    9, 13, 30, 6, 22, 11, 4, 25};

const uint8_t DES::des_E[] = {
    0xff, 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13,
    12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21,
    20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29,
    28, 29, 30, 31, 32, 1};

const uint8_t DES::des_S[][65] = {
    {0xff, 0xe, 0x0, 0x4, 0xf, 0xd, 0x7, 0x1, 0x4, 0x2, 0xe, 0xf, 0x2, 0xb,
     0xd, 0x8, 0x1, 0x3, 0xa, 0xa, 0x6, 0x6, 0xc, 0xc, 0xb, 0x5, 0x9,
     0x9, 0x5, 0x0, 0x3, 0x7, 0x8, 0x4, 0xf, 0x1, 0xc, 0xe, 0x8, 0x8,
     0x2, 0xd, 0x4, 0x6, 0x9, 0x2, 0x1, 0xb, 0x7, 0xf, 0x5, 0xc, 0xb,
     0x9, 0x3, 0x7, 0xe, 0x3, 0xa, 0xa, 0x0, 0x5, 0x6, 0x0, 0xd}, // 这一部分没用，仅占位

    {0xff, 0xe, 0x0, 0x4, 0xf, 0xd, 0x7, 0x1, 0x4, 0x2, 0xe, 0xf, 0x2, 0xb,
     0xd, 0x8, 0x1, 0x3, 0xa, 0xa, 0x6, 0x6, 0xc, 0xc, 0xb, 0x5, 0x9,
     0x9, 0x5, 0x0, 0x3, 0x7, 0x8, 0x4, 0xf, 0x1, 0xc, 0xe, 0x8, 0x8,
     0x2, 0xd, 0x4, 0x6, 0x9, 0x2, 0x1, 0xb, 0x7, 0xf, 0x5, 0xc, 0xb,
     0x9, 0x3, 0x7, 0xe, 0x3, 0xa, 0xa, 0x0, 0x5, 0x6, 0x0, 0xd},

    {0xff, 0xf, 0x3, 0x1, 0xd, 0x8, 0x4, 0xe, 0x7, 0x6, 0xf, 0xb, 0x2, 0x3,
     0x8, 0x4, 0xf, 0x9, 0xc, 0x7, 0x0, 0x2, 0x1, 0xd, 0xa, 0xc, 0x6,
     0x0, 0x9, 0x5, 0xb, 0xa, 0x5, 0x0, 0xd, 0xe, 0x8, 0x7, 0xa, 0xb,
     0x1, 0xa, 0x3, 0x4, 0xf, 0xd, 0x4, 0x1, 0x2, 0x5, 0xb, 0x8, 0x6,
     0xc, 0x7, 0x6, 0xc, 0x9, 0x0, 0x3, 0x5, 0x2, 0xe, 0xf, 0x9},

    {0xff, 0xa, 0xd, 0x0, 0x7, 0x9, 0x0, 0xe, 0x9, 0x6, 0x3, 0x3, 0x4, 0xf,
     0x6, 0x5, 0xa, 0x1, 0x2, 0xd, 0x8, 0xc, 0x5, 0x7, 0xe, 0xb, 0xc,
     0x4, 0xb, 0x2, 0xf, 0x8, 0x1, 0xd, 0x1, 0x6, 0xa, 0x4, 0xd, 0x9,
     0x0, 0x8, 0x6, 0xf, 0x9, 0x3, 0x8, 0x0, 0x7, 0xb, 0x4, 0x1, 0xf,
     0x2, 0xe, 0xc, 0x3, 0x5, 0xb, 0xa, 0x5, 0xe, 0x2, 0x7, 0xc},

    {0xff, 0x7, 0xd, 0xd, 0x8, 0xe, 0xb, 0x3, 0x5, 0x0, 0x6, 0x6, 0xf, 0x9,
     0x0, 0xa, 0x3, 0x1, 0x4, 0x2, 0x7, 0x8, 0x2, 0x5, 0xc, 0xb, 0x1,
     0xc, 0xa, 0x4, 0xe, 0xf, 0x9, 0xa, 0x3, 0x6, 0xf, 0x9, 0x0, 0x0,
     0x6, 0xc, 0xa, 0xb, 0xa, 0x7, 0xd, 0xd, 0x8, 0xf, 0x9, 0x1, 0x4,
     0x3, 0x5, 0xe, 0xb, 0x5, 0xc, 0x2, 0x7, 0x8, 0x2, 0x4, 0xe},

    {0xff, 0x2, 0xe, 0xc, 0xb, 0x4, 0x2, 0x1, 0xc, 0x7, 0x4, 0xa, 0x7, 0xb,
     0xd, 0x6, 0x1, 0x8, 0x5, 0x5, 0x0, 0x3, 0xf, 0xf, 0xa, 0xd, 0x3,
     0x0, 0x9, 0xe, 0x8, 0x9, 0x6, 0x4, 0xb, 0x2, 0x8, 0x1, 0xc, 0xb,
     0x7, 0xa, 0x1, 0xd, 0xe, 0x7, 0x2, 0x8, 0xd, 0xf, 0x6, 0x9, 0xf,
     0xc, 0x0, 0x5, 0x9, 0x6, 0xa, 0x3, 0x4, 0x0, 0x5, 0xe, 0x3},

    {0xff, 0xc, 0xa, 0x1, 0xf, 0xa, 0x4, 0xf, 0x2, 0x9, 0x7, 0x2, 0xc, 0x6,
     0x9, 0x8, 0x5, 0x0, 0x6, 0xd, 0x1, 0x3, 0xd, 0x4, 0xe, 0xe, 0x0,
     0x7, 0xb, 0x5, 0x3, 0xb, 0x8, 0x9, 0x4, 0xe, 0x3, 0xf, 0x2, 0x5,
     0xc, 0x2, 0x9, 0x8, 0x5, 0xc, 0xf, 0x3, 0xa, 0x7, 0xb, 0x0, 0xe,
     0x4, 0x1, 0xa, 0x7, 0x1, 0x6, 0xd, 0x0, 0xb, 0x8, 0x6, 0xd},

    {0xff, 0x4, 0xd, 0xb, 0x0, 0x2, 0xb, 0xe, 0x7, 0xf, 0x4, 0x0, 0x9, 0x8,
     0x1, 0xd, 0xa, 0x3, 0xe, 0xc, 0x3, 0x9, 0x5, 0x7, 0xc, 0x5, 0x2,
     0xa, 0xf, 0x6, 0x8, 0x1, 0x6, 0x1, 0x6, 0x4, 0xb, 0xb, 0xd, 0xd,
     0x8, 0xc, 0x1, 0x3, 0x4, 0x7, 0xa, 0xe, 0x7, 0xa, 0x9, 0xf, 0x5,
     0x6, 0x0, 0x8, 0xf, 0x0, 0xe, 0x5, 0x2, 0x9, 0x3, 0x2, 0xc},

    {0xff, 0xd, 0x1, 0x2, 0xf, 0x8, 0xd, 0x4, 0x8, 0x6, 0xa, 0xf, 0x3, 0xb,
     0x7, 0x1, 0x4, 0xa, 0xc, 0x9, 0x5, 0x3, 0x6, 0xe, 0xb, 0x5, 0x0,
     0x0, 0xe, 0xc, 0x9, 0x7, 0x2, 0x7, 0x2, 0xb, 0x1, 0x4, 0xe, 0x1,
     0x7, 0x9, 0x4, 0xc, 0xa, 0xe, 0x8, 0x2, 0xd, 0x0, 0xf, 0x6, 0xc,
     0xa, 0x9, 0xd, 0x0, 0xf, 0x3, 0x3, 0x5, 0x5, 0x6, 0x8, 0xb}

};

const uint8_t DES::keyleftright[] = {
    0xff, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4};

const uint8_t DES::lefttable[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

const uint8_t DES::keychoose[] = {
    0xff, 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32};

DES::DES(string k)
{
    if (k.length() != 8)
    {
        perror("The length of cipher key is not 8 !");
        exit(1);
    }
    srcKey = k;
    genKey(); // 在这里生成16个子密钥
}

string DES::getResult(string text, bool m)
{
    mode = m;
    if (mode)
    {
        plaintext = text;
        encry();
        return ciphertext;
    }
    else
    {
        ciphertext = text;
        decry();
        return plaintext;
    }
}

string DES::strxor(string s1, string s2)
{
    int len = s1.length() > s2.length() ? s1.length() : s2.length();
    string s;
    for (int i = 0; i < len; i++)
    {
        if (i >= s1.length() || i >= s2.length())
            s.push_back('0');
        else
        {
            if (s1[i] == s2[i])
                s.push_back('0');
            else
                s.push_back('1');
        }
    }
    return s;
}

string DES::genBinaryMsg(string src)
{
    string s;
    for (int i = 0; i < src.length(); i++)
        s += toBinary(src[i], 8);
    return s;
}

string DES::check64(string src)
{
    if (src.length() == 64)
        return src;
    if (src.length() > 64) // 大于64位则取前64位
        return src.substr(0, 64);
    string s;
    s += src;
    int len = 64 - src.length();
    for (int i = 0; i < len; i++)
        s += "0"; // 小于64位则在末尾补0
    return s;
}

string DES::toCheckedBinary(int num)
{
    string s = toBinaryString(num);
    if (s.length() > 7)
    {
        perror("The cipher key must be ASCII !");
        exit(1);
    }
    int count1 = 0;
    for (int i = 0; i < s.length(); i++)
    {
        if (s[i] == '1')
            count1++;
    }
    if (count1 % 2 == 0)
        return s + "1";
    return s + "0";
}

string DES::genBinaryKey(string src, int len)
{
    string s;
    for (int i = 0; i < len; i++)
        s += toCheckedBinary(src[i]);
    return s;
}

string DES::firstIP(string src)
{
    src = "0" + src;
    string s;
    for (int i = 1; i <= 64; i++)
        s.push_back(src[pc_first[i]]);
    return s;
}

string DES::lastIP(string src)
{
    src = "0" + src;
    string s;
    for (int i = 1; i <= 64; i++)
        s.push_back(src[pc_last[i]]);
    return s;
}

string DES::ope_E(string right)
{
    string r = "0" + right, s;
    for (int i = 1; i <= 48; i++)
        s.push_back(r[des_E[i]]);
    return s;
}

string DES::ope_S(string right)
{
    string r = "0" + right, s;
    int j = 1;
    for (int i = 1; i <= 48; i += 6)
    {
        string temp = r.substr(i, 6);
        s += toBinary(des_S[j][parseBinaryInt(temp)], 4);
        j++;
    }
    return s;
}

string DES::ope_P(string right)
{
    string r = "0" + right, s;
    for (int i = 1; i <= 32; i++)
        s.push_back(r[des_P[i]]);
    return s;
}

string DES::f(string right, string key)
{
    string addResult = strxor(ope_E(right), key);
    return ope_P(ope_S(addResult));
}

string DES::itra16(string left, string right)
{
    if (mode)
    {
        for (int i = 0; i < 16; i++)
        {
            string copyLeft = left;
            left = right;
            right = strxor(copyLeft, f(right, keys[i]));
        }
    }
    else
    {
        for (int i = 15; i >= 0; i--)
        {
            string copyLeft = left;
            left = right;
            right = strxor(copyLeft, f(right, keys[i]));
        }
    }
    return right + left; // 注意16次迭代完了要交换左右两部分再拼接
}

string *DES::ope_pc_1()
{
    string *result = new string[2];
    string src = "0" + genBinaryKey(srcKey, 8);
    string s;
    // 生成初始密钥对应的二进制字符串：初始密钥的每个字符8 bit，第8个bit为奇校验码
    // 即使每8 bit出现的1的个数为奇数
    for (int i = 1; i <= 56; i++)
        s.push_back(src[keyleftright[i]]);
    // 将56位密钥拆分成左右两部分
    result[0] = s.substr(0, 28);
    result[1] = s.substr(28);
    return result;
}

string DES::ope_shift(string src, int index)
{
    return src.substr(index) + src.substr(0, index);
}

string DES::ope_pc_2(string src)
{
    src = "0" + src;
    string s;
    for (int i = 1; i <= 48; i++)
        s.push_back(src[keychoose[i]]);
    return s;
}

void DES::genKey()
{
    string *temp = ope_pc_1();
    for (int i = 0; i < 16; i++)
    {
        temp[0] = ope_shift(temp[0], lefttable[i]);
        temp[1] = ope_shift(temp[1], lefttable[i]);
        keys[i] = ope_pc_2(temp[0] + temp[1]); // 左右两部分拼接，进行密钥置换选择PC-2运算
    }
}

void DES::encry()
{
    string temp, binary = genBinaryMsg(plaintext); // 将明文转为二进制字符串，使用utf-8编码
    for (int i = 0; i < binary.length(); i += 64)
    {
        string s = firstIP(check64(binary.substr(i)));
        temp += lastIP(itra16(s.substr(0, 32), s.substr(32))); // 初始IP置换后的结果拆成左右两部分
    }
    ciphertext = temp; // 加密产生结果输出为二进制字符串
}

void DES::decry()
{
    string temp, binary = ciphertext;
    // 先检查输入的密文是不是二进制字符串
    for (int i = 0; i < binary.length(); i++)
    {
        if (binary[i] != '0' && binary[i] != '1') {
            perror("The ciphertext must be binary string !");
            exit(1);
        }
    }
    for (int i = 0; i < binary.length(); i += 64)
    {
        string s = firstIP(check64(binary.substr(i)));
        temp += lastIP(itra16(s.substr(0, 32), s.substr(32))); // 初始IP置换后的结果拆成左右两部分
    }
    plaintext = binary2String(temp); // 将解密生成的二进制字符串转为普通字符串，按照utf-8编码转换
}
